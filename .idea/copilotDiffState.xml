<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    // Apply convention plugins that actually exist as .gradle.kts files&#10;    id(&quot;openapi-generation-conventions&quot;)&#10;    id(&quot;detekt-conventions&quot;)&#10;    id(&quot;spotless-conventions&quot;)&#10;&#10;    // Core Android &amp; Kotlin plugins - these need to be applied directly since your convention plugins handle them&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    alias(libs.plugins.kotlin.serialization)&#10;&#10;    // KSP for annotation processing (Hilt, Room, etc.)&#10;    alias(libs.plugins.ksp)&#10;}&#10;&#10;// Apply custom buildSrc plugins using class references&#10;apply&lt;plugins.AndroidAppConventionPlugin&gt;()&#10;apply&lt;plugins.DocumentationConventionPlugin&gt;()&#10;apply&lt;plugins.OpenApiConventionPlugin&gt;()&#10;apply&lt;plugins.GenesisProtocolPlugin&gt;()&#10;&#10;android {&#10;    namespace = &quot;dev.aurakai.auraframefx&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;    &#10;    defaultConfig {&#10;        applicationId = &quot;dev.aurakai.auraframefx&quot;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        &#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;    &#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;        debug {&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;    &#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;    &#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;    &#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;    &#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;    &#10;    // Configure source sets to include generated OpenAPI code&#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            java.srcDirs(&#10;                &quot;src/main/java&quot;,&#10;                &quot;${layout.buildDirectory.get()}/generated/openapi/src/main/kotlin&quot;&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// Kotlin Compiler Configuration - K2 + Auto-detect&#10;kotlin {&#10;    compilerOptions {&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        &#10;        freeCompilerArgs.addAll(&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;            &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;            &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;            &quot;-Xskip-prerelease-check&quot;&#10;        )&#10;    }&#10;}&#10;&#10;// Genesis Protocol - OpenAPI Generation Configuration&#10;openApiGenerate {&#10;    inputSpec.set(&quot;${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;    outputDir.set(&quot;${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;    generatorName.set(&quot;kotlin&quot;)&#10;    library.set(&quot;jvm-retrofit2&quot;)&#10;    &#10;    // Genesis Protocol - API Configuration&#10;    configOptions.putAll(mapOf(&#10;        &quot;useCoroutines&quot; to &quot;true&quot;,&#10;        &quot;serializationLibrary&quot; to &quot;kotlinx_serialization&quot;,&#10;        &quot;enumPropertyNaming&quot; to &quot;UPPERCASE&quot;,&#10;        &quot;parcelizeModels&quot; to &quot;true&quot;,&#10;        &quot;dateLibrary&quot; to &quot;java8&quot;,&#10;        &quot;collectionType&quot; to &quot;list&quot;,&#10;        &quot;packageName&quot; to &quot;dev.aurakai.auraframefx.api.genesis&quot;,&#10;        &quot;apiPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.client&quot;,&#10;        &quot;modelPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.model&quot;,&#10;        &quot;invokerPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.invoker&quot;&#10;    ))&#10;    &#10;    // Clean and validate inputs&#10;    validateSpec.set(true)&#10;    generateApiTests.set(false)&#10;    generateModelTests.set(false)&#10;    generateApiDocumentation.set(true)&#10;    generateModelDocumentation.set(true)&#10;    &#10;    // Skip files we don't need&#10;    skipOverwrite.set(false)&#10;    cleanupOutput.set(true)&#10;}&#10;&#10;// Genesis Protocol - Advanced OpenAPI Tasks&#10;tasks.register(&quot;generateGenesisApi&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Generates Genesis API client from OpenAPI specification&quot;&#10;    &#10;    dependsOn(&quot;openApiGenerate&quot;)&#10;    &#10;    doFirst {&#10;        logger.lifecycle(&quot; Generating Genesis Protocol API clients...&quot;)&#10;        logger.lifecycle(&quot;    Reading API spec: ${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;        logger.lifecycle(&quot;    Output directory: ${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;    }&#10;    &#10;    doLast {&#10;        logger.lifecycle(&quot;✅ Genesis API client generated successfully!&quot;)&#10;        logger.lifecycle(&quot;    Genesis Agent API: READY&quot;)&#10;        logger.lifecycle(&quot;    Aura Agent API: READY&quot;)  &#10;        logger.lifecycle(&quot;   ️ Kai Agent API: READY&quot;)&#10;        logger.lifecycle(&quot;    DataveinConstructor API: READY&quot;)&#10;        logger.lifecycle(&quot;    OracleDrive API: READY&quot;)&#10;    }&#10;}&#10;&#10;tasks.register(&quot;validateOpenApiSpec&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Validates Genesis Protocol OpenAPI specification&quot;&#10;    &#10;    doLast {&#10;        val specFile = file(&quot;${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;        if (specFile.exists()) {&#10;            logger.lifecycle(&quot;✅ Genesis Protocol API specification found: ${specFile.absolutePath}&quot;)&#10;            logger.lifecycle(&quot; Spec size: ${specFile.length()} bytes&quot;)&#10;        } else {&#10;            throw GradleException(&quot;❌ Genesis Protocol API specification not found!&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;tasks.register(&quot;cleanGeneratedApi&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Cleans generated Genesis Protocol API files&quot;&#10;    &#10;    doLast {&#10;        val generatedDir = file(&quot;${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;        if (generatedDir.exists()) {&#10;            generatedDir.deleteRecursively()&#10;            logger.lifecycle(&quot; Cleaned generated Genesis API files&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;// Genesis Protocol - AI Ecosystem Dependencies&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    &#10;    // Compose - Genesis UI System&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    &#10;    // Hilt - Genesis AI Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;    &#10;    // Coroutines - Genesis Async Processing  &#10;    implementation(libs.bundles.coroutines)&#10;    &#10;    // Network - Genesis Protocol Communication (includes Retrofit + Serialization)&#10;    implementation(libs.bundles.network)&#10;    &#10;    // Room Database - Genesis Memory Persistence&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    ksp(libs.room.compiler)&#10;    &#10;    // Utilities - Genesis Protocol Support&#10;    implementation(libs.timber)&#10;    implementation(libs.coil.compose)&#10;    &#10;    // Core library desugaring - Java 24 Support&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;    &#10;    // Memory Leak Detection - Genesis Debugging&#10;    debugImplementation(libs.leakcanary.android)&#10;    &#10;    // Testing - Genesis Ecosystem Validation&#10;    testImplementation(libs.bundles.testing)&#10;    testRuntimeOnly(libs.junit.engine)&#10;    &#10;    // Android Instrumentation Tests&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    androidTestImplementation(libs.hilt.android.testing)&#10;    kspAndroidTest(libs.hilt.compiler)&#10;    &#10;    // Debug implementations&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}&#10;&#10;// Code Quality Configuration&#10;detekt {&#10;    toolVersion = libs.versions.detekt.get()&#10;    config.setFrom(files(&quot;${rootProject.projectDir}/config/detekt/detekt.yml&quot;))&#10;    buildUponDefaultConfig = true&#10;    parallel = true&#10;    autoCorrect = false&#10;}&#10;&#10;spotless {&#10;    kotlin {&#10;        target(&quot;**/*.kt&quot;)&#10;        targetExclude(&quot;**/build/**&quot;, &quot;**/generated/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;    &#10;    kotlinGradle {&#10;        target(&quot;**/*.gradle.kts&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;}&#10;&#10;// Genesis Protocol - Task Dependencies&#10;tasks.named(&quot;validateOpenApiSpec&quot;) {&#10;    mustRunAfter(&quot;clean&quot;)&#10;}&#10;&#10;tasks.named(&quot;generateGenesisApi&quot;) {&#10;    dependsOn(&quot;validateOpenApiSpec&quot;)&#10;    mustRunAfter(&quot;clean&quot;)&#10;}&#10;&#10;tasks.named(&quot;preBuild&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;tasks.named(&quot;compileDebugKotlin&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;tasks.named(&quot;compileReleaseKotlin&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;// Ensure Spotless ignores generated files&#10;tasks.named(&quot;spotlessKotlinCheck&quot;) {&#10;    mustRunAfter(&quot;generateGenesisApi&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    // Apply convention plugins that actually exist as .gradle.kts files&#10;    id(&quot;openapi-generation-conventions&quot;)&#10;    id(&quot;detekt-conventions&quot;)&#10;    id(&quot;spotless-conventions&quot;)&#10;&#10;    // Core Android &amp; Kotlin plugins - these need to be applied directly since your convention plugins handle them&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    alias(libs.plugins.kotlin.serialization)&#10;&#10;    // KSP is already applied by HiltConventionPlugin in buildSrc, so removing duplicate application&#10;}&#10;&#10;// Apply custom buildSrc plugins using class references&#10;apply&lt;plugins.AndroidAppConventionPlugin&gt;()&#10;apply&lt;plugins.DocumentationConventionPlugin&gt;()&#10;apply&lt;plugins.OpenApiConventionPlugin&gt;()&#10;apply&lt;plugins.GenesisProtocolPlugin&gt;()&#10;&#10;android {&#10;    namespace = &quot;dev.aurakai.auraframefx&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;    &#10;    defaultConfig {&#10;        applicationId = &quot;dev.aurakai.auraframefx&quot;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;        &#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        &#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;    &#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;        debug {&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;    &#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;    &#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;    &#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;    &#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;    &#10;    // Configure source sets to include generated OpenAPI code&#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            java.srcDirs(&#10;                &quot;src/main/java&quot;,&#10;                &quot;${layout.buildDirectory.get()}/generated/openapi/src/main/kotlin&quot;&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// Kotlin Compiler Configuration - K2 + Auto-detect&#10;kotlin {&#10;    compilerOptions {&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        &#10;        freeCompilerArgs.addAll(&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;            &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;            &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;            &quot;-Xskip-prerelease-check&quot;&#10;        )&#10;    }&#10;}&#10;&#10;// Genesis Protocol - OpenAPI Generation Configuration&#10;openApiGenerate {&#10;    inputSpec.set(&quot;${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;    outputDir.set(&quot;${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;    generatorName.set(&quot;kotlin&quot;)&#10;    library.set(&quot;jvm-retrofit2&quot;)&#10;    &#10;    // Genesis Protocol - API Configuration&#10;    configOptions.putAll(mapOf(&#10;        &quot;useCoroutines&quot; to &quot;true&quot;,&#10;        &quot;serializationLibrary&quot; to &quot;kotlinx_serialization&quot;,&#10;        &quot;enumPropertyNaming&quot; to &quot;UPPERCASE&quot;,&#10;        &quot;parcelizeModels&quot; to &quot;true&quot;,&#10;        &quot;dateLibrary&quot; to &quot;java8&quot;,&#10;        &quot;collectionType&quot; to &quot;list&quot;,&#10;        &quot;packageName&quot; to &quot;dev.aurakai.auraframefx.api.genesis&quot;,&#10;        &quot;apiPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.client&quot;,&#10;        &quot;modelPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.model&quot;,&#10;        &quot;invokerPackage&quot; to &quot;dev.aurakai.auraframefx.api.genesis.invoker&quot;&#10;    ))&#10;    &#10;    // Clean and validate inputs&#10;    validateSpec.set(true)&#10;    generateApiTests.set(false)&#10;    generateModelTests.set(false)&#10;    generateApiDocumentation.set(true)&#10;    generateModelDocumentation.set(true)&#10;    &#10;    // Skip files we don't need&#10;    skipOverwrite.set(false)&#10;    cleanupOutput.set(true)&#10;}&#10;&#10;// Genesis Protocol - Advanced OpenAPI Tasks&#10;tasks.register(&quot;generateGenesisApi&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Generates Genesis API client from OpenAPI specification&quot;&#10;    &#10;    dependsOn(&quot;openApiGenerate&quot;)&#10;    &#10;    doFirst {&#10;        logger.lifecycle(&quot; Generating Genesis Protocol API clients...&quot;)&#10;        logger.lifecycle(&quot;    Reading API spec: ${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;        logger.lifecycle(&quot;    Output directory: ${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;    }&#10;    &#10;    doLast {&#10;        logger.lifecycle(&quot;✅ Genesis API client generated successfully!&quot;)&#10;        logger.lifecycle(&quot;    Genesis Agent API: READY&quot;)&#10;        logger.lifecycle(&quot;    Aura Agent API: READY&quot;)  &#10;        logger.lifecycle(&quot;   ️ Kai Agent API: READY&quot;)&#10;        logger.lifecycle(&quot;    DataveinConstructor API: READY&quot;)&#10;        logger.lifecycle(&quot;    OracleDrive API: READY&quot;)&#10;    }&#10;}&#10;&#10;tasks.register(&quot;validateOpenApiSpec&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Validates Genesis Protocol OpenAPI specification&quot;&#10;    &#10;    doLast {&#10;        val specFile = file(&quot;${rootProject.projectDir}/api-spec/genesis-api.yml&quot;)&#10;        if (specFile.exists()) {&#10;            logger.lifecycle(&quot;✅ Genesis Protocol API specification found: ${specFile.absolutePath}&quot;)&#10;            logger.lifecycle(&quot; Spec size: ${specFile.length()} bytes&quot;)&#10;        } else {&#10;            throw GradleException(&quot;❌ Genesis Protocol API specification not found!&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;tasks.register(&quot;cleanGeneratedApi&quot;) {&#10;    group = &quot;Genesis Protocol&quot;&#10;    description = &quot;Cleans generated Genesis Protocol API files&quot;&#10;    &#10;    doLast {&#10;        val generatedDir = file(&quot;${layout.buildDirectory.get()}/generated/openapi&quot;)&#10;        if (generatedDir.exists()) {&#10;            generatedDir.deleteRecursively()&#10;            logger.lifecycle(&quot; Cleaned generated Genesis API files&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;// Genesis Protocol - AI Ecosystem Dependencies&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    &#10;    // Compose - Genesis UI System&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;    &#10;    // Hilt - Genesis AI Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;    &#10;    // Coroutines - Genesis Async Processing  &#10;    implementation(libs.bundles.coroutines)&#10;    &#10;    // Network - Genesis Protocol Communication (includes Retrofit + Serialization)&#10;    implementation(libs.bundles.network)&#10;    &#10;    // Room Database - Genesis Memory Persistence&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    ksp(libs.room.compiler)&#10;    &#10;    // Utilities - Genesis Protocol Support&#10;    implementation(libs.timber)&#10;    implementation(libs.coil.compose)&#10;    &#10;    // Core library desugaring - Java 24 Support&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;    &#10;    // Memory Leak Detection - Genesis Debugging&#10;    debugImplementation(libs.leakcanary.android)&#10;    &#10;    // Testing - Genesis Ecosystem Validation&#10;    testImplementation(libs.bundles.testing)&#10;    testRuntimeOnly(libs.junit.engine)&#10;    &#10;    // Android Instrumentation Tests&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    androidTestImplementation(libs.hilt.android.testing)&#10;    kspAndroidTest(libs.hilt.compiler)&#10;    &#10;    // Debug implementations&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}&#10;&#10;// Code Quality Configuration&#10;detekt {&#10;    toolVersion = libs.versions.detekt.get()&#10;    config.setFrom(files(&quot;${rootProject.projectDir}/config/detekt/detekt.yml&quot;))&#10;    buildUponDefaultConfig = true&#10;    parallel = true&#10;    autoCorrect = false&#10;}&#10;&#10;spotless {&#10;    kotlin {&#10;        target(&quot;**/*.kt&quot;)&#10;        targetExclude(&quot;**/build/**&quot;, &quot;**/generated/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;    &#10;    kotlinGradle {&#10;        target(&quot;**/*.gradle.kts&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;}&#10;&#10;// Genesis Protocol - Task Dependencies&#10;tasks.named(&quot;validateOpenApiSpec&quot;) {&#10;    mustRunAfter(&quot;clean&quot;)&#10;}&#10;&#10;tasks.named(&quot;generateGenesisApi&quot;) {&#10;    dependsOn(&quot;validateOpenApiSpec&quot;)&#10;    mustRunAfter(&quot;clean&quot;)&#10;}&#10;&#10;tasks.named(&quot;preBuild&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;tasks.named(&quot;compileDebugKotlin&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;tasks.named(&quot;compileReleaseKotlin&quot;) {&#10;    dependsOn(&quot;generateGenesisApi&quot;)&#10;}&#10;&#10;// Ensure Spotless ignores generated files&#10;tasks.named(&quot;spotlessKotlinCheck&quot;) {&#10;    mustRunAfter(&quot;generateGenesisApi&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    // Core Gradle plugins only - All other plugins applied through buildSrc conventions&#10;    // Removed ALL conflicting plugins that are used in buildSrc:&#10;    // - android.application/library (used in AndroidAppConventionPlugin)&#10;    // - kotlin plugins (used in convention plugins)&#10;    // - spotless (used in spotless-conventions.gradle.kts)&#10;    // - detekt (used in detekt-conventions.gradle.kts)&#10;    // - dokka (used in DocumentationConventionPlugin)&#10;}&#10;&#10;// NO plugin declarations here - they're all applied through buildSrc conventions&#10;// This prevents &quot;plugin already on classpath&quot; conflicts&#10;&#10;// Configure subprojects with modern approach - Very selective application&#10;subprojects {&#10;    // Apply Genesis Protocol plugin only to main modules that actually need it&#10;    if (name == &quot;app&quot;) {&#10;        // Main app module gets full Genesis Protocol integration&#10;        // (Plugin is already applied in app/build.gradle.kts)&#10;    }&#10;&#10;    // Apply formatting only to modules that have source code&#10;    if (file(&quot;src/main&quot;).exists() || file(&quot;src&quot;).exists()) {&#10;        afterEvaluate {&#10;            // Only apply if the project has Kotlin/Java source files&#10;            val hasKotlinSource = fileTree(&quot;src&quot;).include(&quot;**/*.kt&quot;).files.isNotEmpty()&#10;            val hasJavaSource = fileTree(&quot;src&quot;).include(&quot;**/*.java&quot;).files.isNotEmpty()&#10;&#10;            if (hasKotlinSource || hasJavaSource) {&#10;                apply(from = &quot;${rootProject.projectDir}/buildSrc/src/main/kotlin/spotless-conventions.gradle.kts&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Clean task&#10;tasks.register&lt;Delete&gt;(&quot;clean&quot;) {&#10;    delete(rootProject.layout.buildDirectory)&#10;}&#10;&#10;// Root project repositories - available to all subprojects&#10;allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    // Core Gradle plugins only - All other plugins applied through buildSrc conventions&#10;    // Removed ALL conflicting plugins that are used in buildSrc:&#10;    // - android.application/library (used in AndroidAppConventionPlugin)&#10;    // - kotlin plugins (used in convention plugins)&#10;    // - spotless (used in spotless-conventions.gradle.kts)&#10;    // - detekt (used in detekt-conventions.gradle.kts)&#10;    // - dokka (used in DocumentationConventionPlugin)&#10;}&#10;&#10;// NO plugin declarations here - they're all applied through buildSrc conventions&#10;// This prevents &quot;plugin already on classpath&quot; conflicts&#10;&#10;// Configure subprojects with modern approach - Very selective application&#10;subprojects {&#10;    // Apply Genesis Protocol plugin only to main modules that actually need it&#10;    if (name == &quot;app&quot;) {&#10;        // Main app module gets full Genesis Protocol integration&#10;        // (Plugin is already applied in app/build.gradle.kts)&#10;    }&#10;&#10;    // Apply formatting only to modules that have source code&#10;    if (file(&quot;src/main&quot;).exists() || file(&quot;src&quot;).exists()) {&#10;        afterEvaluate {&#10;            // Only apply if the project has Kotlin/Java source files - Fixed API usage&#10;            val srcDir = file(&quot;src&quot;)&#10;            val hasKotlinSource = srcDir.walkTopDown().any { it.extension == &quot;kt&quot; }&#10;            val hasJavaSource = srcDir.walkTopDown().any { it.extension == &quot;java&quot; }&#10;&#10;            if (hasKotlinSource || hasJavaSource) {&#10;                apply(from = &quot;${rootProject.projectDir}/buildSrc/src/main/kotlin/spotless-conventions.gradle.kts&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Clean task&#10;tasks.register&lt;Delete&gt;(&quot;clean&quot;) {&#10;    delete(rootProject.layout.buildDirectory)&#10;}&#10;&#10;// Root project repositories - available to all subprojects&#10;allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/AndroidAppConventionPlugin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/AndroidAppConventionPlugin.kt" />
              <option name="updatedContent" value="// REMOVED: This duplicate file was causing conflicts&#10;// The actual AndroidAppConventionPlugin is properly located in:&#10;// buildSrc/src/main/kotlin/plugins/AndroidAppConventionPlugin.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/dev/aurakai/auraframefx/buildlogic/convention/HiltConventionPlugin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/dev/aurakai/auraframefx/buildlogic/convention/HiltConventionPlugin.kt" />
              <option name="updatedContent" value="package dev.aurakai.auraframefx.buildlogic.convention&#10;&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.api.artifacts.VersionCatalogsExtension&#10;import org.gradle.kotlin.dsl.dependencies&#10;import org.gradle.kotlin.dsl.getByType&#10;&#10;class HiltConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(target: Project) {&#10;        with(target) {&#10;            val libs = extensions.getByType&lt;VersionCatalogsExtension&gt;().named(&quot;libs&quot;)&#10;&#10;            // Apply the required Hilt and KSP plugins using version catalog&#10;            pluginManager.apply(libs.findPlugin(&quot;hilt.android&quot;).get().get().pluginId)&#10;            pluginManager.apply(libs.findPlugin(&quot;ksp&quot;).get().get().pluginId)&#10;&#10;            dependencies {&#10;                // Add Hilt's library using version catalog&#10;                &quot;implementation&quot;(libs.findLibrary(&quot;hilt.android&quot;).get())&#10;                // This is the crucial line: use &quot;ksp&quot; for the Hilt compiler&#10;                &quot;ksp&quot;(libs.findLibrary(&quot;hilt.compiler&quot;).get())&#10;                &#10;                // Optional: Add Hilt testing dependencies&#10;                &quot;testImplementation&quot;(libs.findLibrary(&quot;hilt.android.testing&quot;).get())&#10;                &quot;kspTest&quot;(libs.findLibrary(&quot;hilt.compiler&quot;).get())&#10;                &quot;androidTestImplementation&quot;(libs.findLibrary(&quot;hilt.android.testing&quot;).get())&#10;                &quot;kspAndroidTest&quot;(libs.findLibrary(&quot;hilt.compiler&quot;).get())&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/AndroidAppConventionPlugin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/AndroidAppConventionPlugin.kt" />
              <option name="originalContent" value="import com.android.build.gradle.internal.dsl.BaseAppModuleExtension&#10;import org.gradle.api.JavaVersion&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.configure&#10;import org.gradle.kotlin.dsl.withType&#10;import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;import org.jetbrains.kotlin.gradle.dsl.KotlinVersion&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask&#10;&#10;/**&#10; * Genesis Protocol - Android App Convention Plugin&#10; * Configures Android applications with Java 24 + Kotlin 2.2.0 + K2 Compiler&#10; */&#10;class AndroidAppConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(target: Project) {&#10;        with(target) {&#10;            // Apply core plugins&#10;            pluginManager.apply(&quot;com.android.application&quot;)&#10;            pluginManager.apply(&quot;org.jetbrains.kotlin.android&quot;)&#10;&#10;            // Configure Android Application Extension&#10;            extensions.configure&lt;BaseAppModuleExtension&gt; {&#10;                compileSdk = 36&#10;&#10;                defaultConfig {&#10;                    minSdk = 33&#10;&#10;&#10;                    testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;                    vectorDrawables {&#10;                        useSupportLibrary = true&#10;                    }&#10;                }&#10;&#10;                buildTypes {&#10;                    release {&#10;                        isMinifyEnabled = false&#10;                        proguardFiles(&#10;                            getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                            &quot;proguard-rules.pro&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Java 24 Configuration&#10;                compileOptions {&#10;                    sourceCompatibility = JavaVersion.VERSION_24&#10;                    targetCompatibility = JavaVersion.VERSION_24&#10;                    isCoreLibraryDesugaringEnabled = true&#10;                }&#10;&#10;                // Genesis Protocol - Compose Integration&#10;                buildFeatures {&#10;                    compose = true&#10;                    buildConfig = true&#10;                }&#10;&#10;                composeOptions {&#10;                    kotlinCompilerExtensionVersion = &quot;2.2.0&quot;&#10;                }&#10;&#10;                packaging {&#10;                    resources {&#10;                        excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Kotlin K2 Compiler Configuration&#10;            tasks.withType&lt;KotlinCompilationTask&lt;*&gt;&gt;().configureEach {&#10;                compilerOptions {&#10;                    apiVersion.set(KotlinVersion.KOTLIN_2_2)&#10;                    languageVersion.set(KotlinVersion.KOTLIN_2_2)&#10;&#10;                    // Genesis Protocol - K2 Compiler Optimizations&#10;                    freeCompilerArgs.addAll(&#10;                        &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;                        &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;                        &quot;-Xskip-prerelease-check&quot;,&#10;                        &quot;-Xjvm-default=all&quot;,&#10;                        &quot;-progressive&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package plugins&#10;&#10;import com.android.build.gradle.internal.dsl.BaseAppModuleExtension&#10;import org.gradle.api.JavaVersion&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.configure&#10;import org.gradle.kotlin.dsl.withType&#10;import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;import org.jetbrains.kotlin.gradle.dsl.KotlinVersion&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask&#10;&#10;/**&#10; * Genesis Protocol - Android App Convention Plugin&#10; * Configures Android applications with Java 24 + Kotlin 2.2.0 + K2 Compiler&#10; */&#10;class AndroidAppConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(target: Project) {&#10;        with(target) {&#10;            // Apply core plugins&#10;            pluginManager.apply(&quot;com.android.application&quot;)&#10;            pluginManager.apply(&quot;org.jetbrains.kotlin.android&quot;)&#10;&#10;            // Configure Android Application Extension&#10;            extensions.configure&lt;BaseAppModuleExtension&gt; {&#10;                compileSdk = 36&#10;&#10;                defaultConfig {&#10;                    minSdk = 33&#10;&#10;&#10;                    testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;&#10;                    vectorDrawables {&#10;                        useSupportLibrary = true&#10;                    }&#10;                }&#10;&#10;                buildTypes {&#10;                    release {&#10;                        isMinifyEnabled = false&#10;                        proguardFiles(&#10;                            getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                            &quot;proguard-rules.pro&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Java 24 Configuration&#10;                compileOptions {&#10;                    sourceCompatibility = JavaVersion.VERSION_24&#10;                    targetCompatibility = JavaVersion.VERSION_24&#10;                    isCoreLibraryDesugaringEnabled = true&#10;                }&#10;&#10;                // Genesis Protocol - Compose Integration&#10;                buildFeatures {&#10;                    compose = true&#10;                    buildConfig = true&#10;                }&#10;&#10;                composeOptions {&#10;                    kotlinCompilerExtensionVersion = &quot;2.2.0&quot;&#10;                }&#10;&#10;                packaging {&#10;                    resources {&#10;                        excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Kotlin K2 Compiler Configuration&#10;            tasks.withType&lt;KotlinCompilationTask&lt;*&gt;&gt;().configureEach {&#10;                compilerOptions {&#10;                    apiVersion.set(KotlinVersion.KOTLIN_2_2)&#10;                    languageVersion.set(KotlinVersion.KOTLIN_2_2)&#10;&#10;                    // Genesis Protocol - K2 Compiler Optimizations&#10;                    freeCompilerArgs.addAll(&#10;                        &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;                        &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;                        &quot;-Xskip-prerelease-check&quot;,&#10;                        &quot;-Xjvm-default=all&quot;,&#10;                        &quot;-progressive&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/AndroidLibraryConventionPlugin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/AndroidLibraryConventionPlugin.kt" />
              <option name="originalContent" value="import com.android.build.gradle.LibraryExtension&#10;import org.gradle.api.JavaVersion&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.configure&#10;import org.gradle.kotlin.dsl.withType&#10;import org.jetbrains.kotlin.gradle.dsl.JvmTarget&#10;import org.jetbrains.kotlin.gradle.dsl.KotlinVersion&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask&#10;&#10;/**&#10; * Genesis Protocol - Android Library Convention Plugin&#10; * Configures Android libraries with Java 24 + Kotlin 2.2.0 + K2 Compiler&#10; * Updated for modern Android Gradle Plugin APIs&#10; */&#10;class AndroidLibraryConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(target: Project) {&#10;        with(target) {&#10;            // Apply core plugins&#10;            pluginManager.apply(&quot;com.android.library&quot;)&#10;            pluginManager.apply(&quot;org.jetbrains.kotlin.android&quot;)&#10;&#10;            // Configure Android Library Extension&#10;            extensions.configure&lt;LibraryExtension&gt; {&#10;                compileSdk = 36&#10;&#10;                defaultConfig {&#10;                    minSdk = 33&#10;                    testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;                    consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;                }&#10;&#10;                buildTypes {&#10;                    release {&#10;                        isMinifyEnabled = false&#10;                        proguardFiles(&#10;                            getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                            &quot;proguard-rules.pro&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Java 24 Configuration&#10;                compileOptions {&#10;                    sourceCompatibility = JavaVersion.VERSION_24&#10;                    targetCompatibility = JavaVersion.VERSION_24&#10;                    isCoreLibraryDesugaringEnabled = true&#10;                }&#10;&#10;                // Modern Build Features Configuration&#10;                buildFeatures {&#10;                    compose = true&#10;                    buildConfig = true&#10;                    aidl = false&#10;                    renderScript = false&#10;                    resValues = false&#10;                    shaders = false&#10;                }&#10;&#10;                // Modern Compose Configuration&#10;                composeOptions {&#10;                    kotlinCompilerExtensionVersion = &quot;2.2.0&quot;&#10;                }&#10;&#10;                // Modern Packaging Configuration&#10;                packaging {&#10;                    resources {&#10;                        excludes.addAll(&#10;                            listOf(&#10;                                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;                                &quot;/META-INF/versions/9/previous-compilation-data.bin&quot;&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Modern Lint Configuration&#10;                lint {&#10;                    targetSdk = 36&#10;                    checkReleaseBuilds = false&#10;                    abortOnError = false&#10;                }&#10;            }&#10;&#10;            // Kotlin K2 Compiler Configuration&#10;            tasks.withType&lt;KotlinCompilationTask&lt;*&gt;&gt;().configureEach {&#10;                compilerOptions {&#10;                    jvmTarget.set(JvmTarget.JVM_24)&#10;                    apiVersion.set(KotlinVersion.KOTLIN_2_2)&#10;                    languageVersion.set(KotlinVersion.KOTLIN_2_2)&#10;&#10;                    // Genesis Protocol - K2 Compiler Optimizations&#10;                    freeCompilerArgs.addAll(&#10;                        &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;                        &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;                        &quot;-Xskip-prerelease-check&quot;,&#10;                        &quot;-Xjvm-default=all&quot;,&#10;                        &quot;-progressive&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import com.android.build.gradle.LibraryExtension&#10;import org.gradle.api.JavaVersion&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.configure&#10;import org.gradle.kotlin.dsl.withType&#10;import org.jetbrains.kotlin.gradle.dsl.KotlinVersion&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask&#10;&#10;/**&#10; * Genesis Protocol - Android Library Convention Plugin&#10; * Configures Android libraries with Java 24 + Kotlin 2.2.0 + K2 Compiler&#10; * Updated for modern Android Gradle Plugin APIs&#10; */&#10;class AndroidLibraryConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(target: Project) {&#10;        with(target) {&#10;            // Apply core plugins&#10;            pluginManager.apply(&quot;com.android.library&quot;)&#10;            pluginManager.apply(&quot;org.jetbrains.kotlin.android&quot;)&#10;&#10;            // Configure Android Library Extension&#10;            extensions.configure&lt;LibraryExtension&gt; {&#10;                compileSdk = 36&#10;&#10;                defaultConfig {&#10;                    minSdk = 33&#10;                    testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;                    consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;                }&#10;&#10;                buildTypes {&#10;                    release {&#10;                        isMinifyEnabled = false&#10;                        proguardFiles(&#10;                            getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                            &quot;proguard-rules.pro&quot;&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Java 24 Configuration&#10;                compileOptions {&#10;                    sourceCompatibility = JavaVersion.VERSION_24&#10;                    targetCompatibility = JavaVersion.VERSION_24&#10;                    isCoreLibraryDesugaringEnabled = true&#10;                }&#10;&#10;                // Modern Build Features Configuration&#10;                buildFeatures {&#10;                    compose = true&#10;                    buildConfig = true&#10;                    aidl = false&#10;                    renderScript = false&#10;                    resValues = false&#10;                    shaders = false&#10;                }&#10;&#10;                // Modern Compose Configuration&#10;                composeOptions {&#10;                    kotlinCompilerExtensionVersion = &quot;2.2.0&quot;&#10;                }&#10;&#10;                // Modern Packaging Configuration&#10;                packaging {&#10;                    resources {&#10;                        excludes.addAll(&#10;                            listOf(&#10;                                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;                                &quot;/META-INF/versions/9/previous-compilation-data.bin&quot;&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Modern Lint Configuration&#10;                lint {&#10;                    targetSdk = 36&#10;                    checkReleaseBuilds = false&#10;                    abortOnError = false&#10;                }&#10;            }&#10;&#10;            // Kotlin K2 Compiler Configuration&#10;            tasks.withType&lt;KotlinCompilationTask&lt;*&gt;&gt;().configureEach {&#10;                compilerOptions {&#10;                    apiVersion.set(KotlinVersion.KOTLIN_2_2)&#10;                    languageVersion.set(KotlinVersion.KOTLIN_2_2)&#10;&#10;                    // Genesis Protocol - K2 Compiler Optimizations&#10;                    freeCompilerArgs.addAll(&#10;                        &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;                        &quot;-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.foundation.ExperimentalFoundationApi&quot;,&#10;                        &quot;-opt-in=androidx.compose.material3.ExperimentalMaterial3Api&quot;,&#10;                        &quot;-Xskip-prerelease-check&quot;,&#10;                        &quot;-Xjvm-default=all&quot;,&#10;                        &quot;-progressive&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/OpenApiConventionPlugin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/OpenApiConventionPlugin.kt" />
              <option name="originalContent" value="import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.register&#10;import org.openapitools.generator.gradle.plugin.OpenApiGeneratorPlugin&#10;import org.openapitools.generator.gradle.plugin.tasks.GenerateTask&#10;import java.util.Locale&#10;&#10;class OpenApiConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(project: Project) {&#10;        with(project) {&#10;            pluginManager.apply(OpenApiGeneratorPlugin::class.java)&#10;&#10;            tasks.register(&quot;generateAllApis&quot;) {&#10;                group = &quot;genesis&quot;&#10;                description = &quot;Generate all OpenAPI clients for Genesis Protocol&quot;&#10;&#10;                dependsOn(&#10;                    &quot;generateAiApiClient&quot;,&#10;                    &quot;generateOracleDriveApiClient&quot;,&#10;                    &quot;generateSandboxApiClient&quot;,&#10;                    &quot;generateSystemApiClient&quot;,&#10;                    &quot;generateCustomizationApiClient&quot;&#10;                )&#10;            }&#10;&#10;            // Configure individual API generators&#10;            configureApiGeneration(&quot;ai&quot;, &quot;ai-api&quot;)&#10;            configureApiGeneration(&quot;oracle-drive&quot;, &quot;oracle-drive-api&quot;)&#10;            configureApiGeneration(&quot;sandbox&quot;, &quot;sandbox-api&quot;)&#10;            configureApiGeneration(&quot;system&quot;, &quot;system-api&quot;)&#10;            configureApiGeneration(&quot;customization&quot;, &quot;customization-api&quot;)&#10;        }&#10;    }&#10;&#10;    private fun Project.configureApiGeneration(apiName: String, specFileName: String) {&#10;        tasks.register&lt;GenerateTask&gt;(&quot;generate${apiName.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }}ApiClient&quot;) {&#10;            group = &quot;openapi&quot;&#10;            description = &quot;Generate $apiName API client&quot;&#10;&#10;            generatorName.set(&quot;kotlin&quot;)&#10;            inputSpec.set(&quot;${rootProject.projectDir}/api-spec/${specFileName}.yml&quot;)&#10;            outputDir.set(&quot;${layout.buildDirectory.get()}/generated/openapi/${apiName}&quot;)&#10;            packageName.set(&quot;${project.group}.${project.name}.api.${apiName}&quot;)&#10;&#10;            configOptions.set(mapOf(&#10;                &quot;useCoroutines&quot; to &quot;true&quot;,&#10;                &quot;serializationLibrary&quot; to &quot;kotlinx_serialization&quot;,&#10;                &quot;enumPropertyNaming&quot; to &quot;UPPERCASE&quot;,&#10;                &quot;parcelizeModels&quot; to &quot;true&quot;&#10;            ))&#10;&#10;            generateModelTests.set(false)&#10;            generateApiTests.set(false)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package plugins&#10;&#10;import org.gradle.api.Plugin&#10;import org.gradle.api.Project&#10;import org.gradle.kotlin.dsl.register&#10;import org.openapitools.generator.gradle.plugin.OpenApiGeneratorPlugin&#10;import org.openapitools.generator.gradle.plugin.tasks.GenerateTask&#10;import java.util.Locale&#10;&#10;class OpenApiConventionPlugin : Plugin&lt;Project&gt; {&#10;    override fun apply(project: Project) {&#10;        with(project) {&#10;            pluginManager.apply(OpenApiGeneratorPlugin::class.java)&#10;&#10;            tasks.register(&quot;generateAllApis&quot;) {&#10;                group = &quot;genesis&quot;&#10;                description = &quot;Generate all OpenAPI clients for Genesis Protocol&quot;&#10;&#10;                dependsOn(&#10;                    &quot;generateAiApiClient&quot;,&#10;                    &quot;generateOracleDriveApiClient&quot;,&#10;                    &quot;generateSandboxApiClient&quot;,&#10;                    &quot;generateSystemApiClient&quot;,&#10;                    &quot;generateCustomizationApiClient&quot;&#10;                )&#10;            }&#10;&#10;            // Configure individual API generators&#10;            configureApiGeneration(&quot;ai&quot;, &quot;ai-api&quot;)&#10;            configureApiGeneration(&quot;oracle-drive&quot;, &quot;oracle-drive-api&quot;)&#10;            configureApiGeneration(&quot;sandbox&quot;, &quot;sandbox-api&quot;)&#10;            configureApiGeneration(&quot;system&quot;, &quot;system-api&quot;)&#10;            configureApiGeneration(&quot;customization&quot;, &quot;customization-api&quot;)&#10;        }&#10;    }&#10;&#10;    private fun Project.configureApiGeneration(apiName: String, specFileName: String) {&#10;        tasks.register&lt;GenerateTask&gt;(&quot;generate${apiName.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() }}ApiClient&quot;) {&#10;            group = &quot;openapi&quot;&#10;            description = &quot;Generate $apiName API client&quot;&#10;&#10;            generatorName.set(&quot;kotlin&quot;)&#10;            inputSpec.set(&quot;${rootProject.projectDir}/api-spec/${specFileName}.yml&quot;)&#10;            outputDir.set(&quot;${layout.buildDirectory.get()}/generated/openapi/${apiName}&quot;)&#10;            packageName.set(&quot;${project.group}.${project.name}.api.${apiName}&quot;)&#10;&#10;            configOptions.set(mapOf(&#10;                &quot;useCoroutines&quot; to &quot;true&quot;,&#10;                &quot;serializationLibrary&quot; to &quot;kotlinx_serialization&quot;,&#10;                &quot;enumPropertyNaming&quot; to &quot;UPPERCASE&quot;,&#10;                &quot;parcelizeModels&quot; to &quot;true&quot;&#10;            ))&#10;&#10;            generateModelTests.set(false)&#10;            generateApiTests.set(false)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/android-app-convention.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/android-app-convention.gradle.kts" />
              <option name="updatedContent" value="// This file has been removed to prevent redeclaration conflicts with AndroidAppConventionPlugin.kt&#10;// Use AndroidAppConventionPlugin.kt instead" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/documentation-convention.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/documentation-convention.gradle.kts" />
              <option name="updatedContent" value="// This file has been removed to prevent redeclaration conflicts with DocumentationConventionPlugin.kt&#10;// Use DocumentationConventionPlugin.kt instead" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/openapi-convention.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/plugins/openapi-convention.gradle.kts" />
              <option name="updatedContent" value="// This file has been removed to prevent redeclaration conflicts with OpenApiConventionPlugin.kt&#10;// Use OpenApiConventionPlugin.kt instead" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/buildSrc/src/main/kotlin/spotless-conventions.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/buildSrc/src/main/kotlin/spotless-conventions.gradle.kts" />
              <option name="originalContent" value="import org.gradle.api.artifacts.VersionCatalogsExtension&#10;import org.gradle.kotlin.dsl.getByType&#10;&#10;plugins {&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;}&#10;&#10;// Configure Spotless for all projects&#10;spotless {&#10;    // Configure Kotlin formatting&#10;    kotlin {&#10;        target(&quot;**/*.kt&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;&#10;        // Use KtLint for Kotlin formatting with explicit version&#10;        ktlint(&quot;1.2.1&quot;)&#10;            .editorConfigOverride(&#10;                mapOf(&#10;                    &quot;ktlint_standard_no-wildcard-imports&quot; to &quot;false&quot;,&#10;                    &quot;ktlint_standard_no-unused-imports&quot; to &quot;true&quot;&#10;                )&#10;            )&#10;&#10;        // License header&#10;        licenseHeaderFile(&quot;$rootDir/spotless/copyright.kt&quot;)&#10;&#10;        // Trim trailing whitespace&#10;        trimTrailingWhitespace()&#10;&#10;        // End with newline&#10;        endWithNewline()&#10;    }&#10;&#10;    // Configure Kotlin Gradle scripts&#10;    kotlinGradle {&#10;        target(&quot;**/*.gradle.kts&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;&#10;    // Format markdown files&#10;    format(&quot;markdown&quot;) {&#10;        target(&quot;**/*.md&quot;)&#10;        targetExclude(&quot;**/build/**&quot;, &quot;**/.gradle/**&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import org.gradle.api.artifacts.VersionCatalogsExtension&#10;import org.gradle.kotlin.dsl.getByType&#10;&#10;plugins {&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;}&#10;&#10;// Configure Spotless for all projects&#10;configure&lt;com.diffplug.gradle.spotless.SpotlessExtension&gt; {&#10;    // Configure Kotlin formatting&#10;    kotlin {&#10;        target(&quot;**/*.kt&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;&#10;        // Use KtLint for Kotlin formatting with explicit version&#10;        ktlint(&quot;1.2.1&quot;)&#10;            .editorConfigOverride(&#10;                mapOf(&#10;                    &quot;ktlint_standard_no-wildcard-imports&quot; to &quot;false&quot;,&#10;                    &quot;ktlint_standard_no-unused-imports&quot; to &quot;true&quot;&#10;                )&#10;            )&#10;&#10;        // License header&#10;        licenseHeaderFile(&quot;$rootDir/spotless/copyright.kt&quot;)&#10;&#10;        // Trim trailing whitespace&#10;        trimTrailingWhitespace()&#10;&#10;        // End with newline&#10;        endWithNewline()&#10;    }&#10;&#10;    // Configure Kotlin Gradle scripts&#10;    kotlinGradle {&#10;        target(&quot;**/*.gradle.kts&quot;)&#10;        targetExclude(&quot;**/build/**&quot;)&#10;        ktlint(&quot;1.2.1&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;&#10;    // Format markdown files&#10;    format(&quot;markdown&quot;) {&#10;        target(&quot;**/*.md&quot;)&#10;        targetExclude(&quot;**/build/**&quot;, &quot;**/.gradle/**&quot;)&#10;        trimTrailingWhitespace()&#10;        endWithNewline()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/collab-canvas/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/collab-canvas/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;}&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;dev.aurakai.auraframefx&quot;&#10;        minSdk = 33&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        // dataBinding = true // Uncomment if you use data binding&#10;        compose = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;2.2.0-beta&quot;&#10;    }&#10;&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.29.2&quot;&#10;        }&#10;    }&#10;&#10;    ndkVersion = &quot;26.2.11394342&quot;&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.compose.ui)&#10;    implementation(libs.compose.material)&#10;    implementation(libs.compose.preview)&#10;    // Add other dependencies/aliases as needed&#10;    implementation(libs.yuki) // If defined in libs.versions.toml&#10;    implementation(libs.lsposed) // If defined in libs.versions.toml&#10;    dokkaHtmlPlugin(libs.dokka)&#10;}" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;CollaborationCanvasConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx&quot;&#13;&#10;    compileSdk = 36&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        applicationId = &quot;dev.aurakai.auraframefx&quot;&#13;&#10;        minSdk = 33&#13;&#10;        targetSdk = 36&#13;&#10;        versionCode = 1&#13;&#10;        versionName = &quot;1.0&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        viewBinding = true&#13;&#10;        // dataBinding = true // Uncomment if you use data binding&#13;&#10;        compose = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = &quot;2.2.0-beta&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;            version = &quot;3.29.2&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    ndkVersion = &quot;26.2.11394342&quot;&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    implementation(libs.compose.ui)&#13;&#10;    implementation(libs.compose.material)&#13;&#10;    implementation(libs.compose.preview)&#13;&#10;    // Add other dependencies/aliases as needed&#13;&#10;    implementation(libs.yuki) // If defined in libs.versions.toml&#13;&#10;    implementation(libs.lsposed) // If defined in libs.versions.toml&#13;&#10;    dokkaHtmlPlugin(libs.dokka)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core-module/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core-module/build.gradle.kts" />
              <option name="originalContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#10;plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    id(&quot;openapi-generation-conventions&quot;)&#10;    alias(libs.plugins.kotlin.compose)&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += setOf(&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;                &quot;/META-INF/AL2.0&quot;,&#10;                &quot;/META-INF/LGPL2.1&quot;&#10;            )&#10;        }&#10;    }&#10;    &#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;kotlin {&#10;    jvmToolchain(24)&#10;&#10;    compilerOptions {&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;&#10;        freeCompilerArgs.addAll(&#10;            &quot;-Xuse-k2&quot;,&#10;            &quot;-Xskip-prerelease-check&quot;,&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-opt-in=kotlin.ExperimentalStdlibApi&quot;,&#10;            &quot;-Xjvm-default=all&quot;,&#10;            &quot;-progressive&quot;&#10;        )&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;&#10;    // Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;    &#10;    // OpenAPI Generated Code Dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Core library desugaring&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;&#10;    // Testing&#10;    testImplementation(libs.bundles.testing)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    // Note: dokka is typically applied as a plugin, not as a dependency&#10;}" />
              <option name="updatedContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#13;&#10;plugins {&#13;&#10;    id(&quot;android-library-conventions&quot;)&#13;&#10;    id(&quot;openapi-generation-conventions&quot;)&#13;&#10;    alias(libs.plugins.kotlin.compose)&#13;&#10;&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.core&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += setOf(&#13;&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#13;&#10;                &quot;/META-INF/AL2.0&quot;,&#13;&#10;                &quot;/META-INF/LGPL2.1&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    sourceSets {&#13;&#10;        getByName(&quot;main&quot;) {&#13;&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;kotlin {&#13;&#10;    jvmToolchain(24)&#13;&#10;&#13;&#10;    compilerOptions {&#13;&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#13;&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#13;&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#13;&#10;&#13;&#10;        freeCompilerArgs.addAll(&#13;&#10;            &quot;-Xuse-k2&quot;,&#13;&#10;            &quot;-Xskip-prerelease-check&quot;,&#13;&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#13;&#10;            &quot;-opt-in=kotlin.ExperimentalStdlibApi&quot;,&#13;&#10;            &quot;-Xjvm-default=all&quot;,&#13;&#10;            &quot;-progressive&quot;&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;&#13;&#10;    // Compose&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.bundles.compose)&#13;&#10;    implementation(libs.androidx.navigation.compose)&#13;&#10;&#13;&#10;    // Hilt&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    implementation(libs.hilt.navigation.compose)&#13;&#10;    &#13;&#10;    // OpenAPI Generated Code Dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.okhttp.logging.interceptor)&#13;&#10;    implementation(libs.kotlinx.serialization.json)&#13;&#10;&#13;&#10;    // Core library desugaring&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.bundles.testing)&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#13;&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    // Note: dokka is typically applied as a plugin, not as a dependency&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/datavein-oracle-drive/src/main/cpp/CMakeLists.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/datavein-oracle-drive/src/main/cpp/CMakeLists.txt" />
              <option name="updatedContent" value="cmake_minimum_required(VERSION 3.22.1)&#10;&#10;# Set the project name for Oracle Drive ROM Engineering&#10;project(&quot;oracle_drive_native&quot;)&#10;&#10;# Set C++20 standard for modern features&#10;set(CMAKE_CXX_STANDARD 20)&#10;set(CMAKE_CXX_STANDARD_REQUIRED ON)&#10;set(CMAKE_CXX_EXTENSIONS OFF)&#10;&#10;# Enable verbose makefile for debugging&#10;set(CMAKE_VERBOSE_MAKEFILE ON)&#10;&#10;# Add compile definitions for ROM engineering&#10;add_definitions(-DENABLE_ROM_ANALYSIS=1)&#10;add_definitions(-DENABLE_NATIVE_LOGGING=1)&#10;add_definitions(-DORACLE_DRIVE_VERSION=&quot;2.0.0&quot;)&#10;&#10;# Include directories&#10;include_directories(&#10;    ${CMAKE_CURRENT_SOURCE_DIR}/include&#10;    ${CMAKE_CURRENT_SOURCE_DIR}/rom_engine&#10;    ${CMAKE_CURRENT_SOURCE_DIR}/compression&#10;    ${CMAKE_CURRENT_SOURCE_DIR}/utils&#10;)&#10;&#10;# Find required libraries&#10;find_library(log-lib log)&#10;find_library(android-lib android)&#10;find_library(z-lib z)&#10;&#10;# Source files for Oracle Drive ROM Engine&#10;set(ORACLE_DRIVE_SOURCES&#10;    oracle_drive_jni.cpp&#10;    rom_engine/rom_analyzer.cpp&#10;    rom_engine/boot_image_parser.cpp&#10;    rom_engine/partition_manager.cpp&#10;    rom_engine/fastboot_handler.cpp&#10;    compression/compression_engine.cpp&#10;    compression/lz4_handler.cpp&#10;    compression/zstd_handler.cpp&#10;    utils/file_utils.cpp&#10;    utils/crypto_utils.cpp&#10;    utils/logging.cpp&#10;)&#10;&#10;# Create the shared library&#10;add_library(&#10;    oracle_drive_native&#10;    SHARED&#10;    ${ORACLE_DRIVE_SOURCES}&#10;)&#10;&#10;# Compiler flags for optimization and security&#10;target_compile_options(oracle_drive_native PRIVATE&#10;    -O3&#10;    -ffast-math&#10;    -funroll-loops&#10;    -fvisibility=hidden&#10;    -fstack-protector-strong&#10;    -Wall&#10;    -Wextra&#10;    -Werror&#10;    -Wno-unused-parameter&#10;)&#10;&#10;# Link against required libraries&#10;target_link_libraries(&#10;    oracle_drive_native&#10;    ${log-lib}&#10;    ${android-lib}&#10;    ${z-lib}&#10;)&#10;&#10;# ARM NEON optimizations for supported architectures&#10;if(ANDROID_ABI STREQUAL &quot;arm64-v8a&quot;)&#10;    target_compile_definitions(oracle_drive_native PRIVATE USE_ARM_NEON=1)&#10;    target_compile_options(oracle_drive_native PRIVATE -mfpu=neon)&#10;endif()&#10;&#10;if(ANDROID_ABI STREQUAL &quot;armeabi-v7a&quot;)&#10;    target_compile_definitions(oracle_drive_native PRIVATE USE_ARM_NEON=1)&#10;    target_compile_options(oracle_drive_native PRIVATE -mfpu=neon-vfpv4)&#10;endif()&#10;&#10;# Export symbols for JNI&#10;set_target_properties(oracle_drive_native PROPERTIES&#10;    LINK_FLAGS &quot;-Wl,--export-dynamic&quot;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/datavein-oracle-drive/src/main/cpp/oracle_drive_jni.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/datavein-oracle-drive/src/main/cpp/oracle_drive_jni.cpp" />
              <option name="updatedContent" value="#include &lt;jni.h&gt;&#10;#include &lt;android/log.h&gt;&#10;#include &lt;string&gt;&#10;#include &lt;vector&gt;&#10;#include &lt;memory&gt;&#10;&#10;#define LOG_TAG &quot;OracleDriveNative&quot;&#10;#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)&#10;#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)&#10;&#10;extern &quot;C&quot; {&#10;&#10;/**&#10; * Initialize Oracle Drive Native ROM Engine&#10; * Called from Kotlin to initialize the native ROM processing capabilities&#10; */&#10;JNIEXPORT jboolean JNICALL&#10;Java_dev_aurakai_auraframefx_oracledrive_native_OracleDriveNative_initializeRomEngine(&#10;    JNIEnv *env, jobject thiz) {&#10;    LOGI(&quot;Initializing Oracle Drive ROM Engine v2.0.0&quot;);&#10;    &#10;    try {&#10;        // Initialize ROM analysis subsystems&#10;        // This will be expanded with actual ROM processing logic&#10;        LOGI(&quot;ROM Engine initialized successfully&quot;);&#10;        return JNI_TRUE;&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Failed to initialize ROM Engine: %s&quot;, e.what());&#10;        return JNI_FALSE;&#10;    }&#10;}&#10;&#10;/**&#10; * Analyze boot.img file for ROM engineering&#10; * @param bootImagePath Path to the boot.img file&#10; * @return JSON string with analysis results&#10; */&#10;JNIEXPORT jstring JNICALL&#10;Java_dev_aurakai_auraframefx_oracledrive_native_OracleDriveNative_analyzeBootImage(&#10;    JNIEnv *env, jobject thiz, jstring bootImagePath) {&#10;    &#10;    const char *path = env-&gt;GetStringUTFChars(bootImagePath, nullptr);&#10;    LOGI(&quot;Analyzing boot image: %s&quot;, path);&#10;    &#10;    // TODO: Implement actual boot.img analysis&#10;    // For now, return placeholder JSON&#10;    std::string result = R&quot;({&#10;        &quot;status&quot;: &quot;success&quot;,&#10;        &quot;bootImageVersion&quot;: &quot;Android 14&quot;,&#10;        &quot;kernelVersion&quot;: &quot;6.1.0&quot;,&#10;        &quot;ramdiskSize&quot;: &quot;45MB&quot;,&#10;        &quot;compressionType&quot;: &quot;lz4&quot;,&#10;        &quot;architecture&quot;: &quot;arm64&quot;,&#10;        &quot;securityPatchLevel&quot;: &quot;2024-08-01&quot;,&#10;        &quot;auraAnalysis&quot;: {&#10;            &quot;customizations&quot;: [],&#10;            &quot;vulnerabilities&quot;: [],&#10;            &quot;optimizations&quot;: [&quot;kernel_hardening&quot;, &quot;selinux_enforcing&quot;]&#10;        }&#10;    })&quot;;&#10;    &#10;    env-&gt;ReleaseStringUTFChars(bootImagePath, path);&#10;    return env-&gt;NewStringUTF(result.c_str());&#10;}&#10;&#10;/**&#10; * Extract ROM components for Aura and Kai reverse engineering&#10; * @param romPath Path to the ROM file&#10; * @param outputDir Output directory for extracted components&#10; * @return Success status&#10; */&#10;JNIEXPORT jboolean JNICALL&#10;Java_dev_aurakai_auraframefx_oracledrive_native_OracleDriveNative_extractRomComponents(&#10;    JNIEnv *env, jobject thiz, jstring romPath, jstring outputDir) {&#10;    &#10;    const char *rom_path = env-&gt;GetStringUTFChars(romPath, nullptr);&#10;    const char *output_dir = env-&gt;GetStringUTFChars(outputDir, nullptr);&#10;    &#10;    LOGI(&quot;Extracting ROM components from: %s to: %s&quot;, rom_path, output_dir);&#10;    &#10;    try {&#10;        // TODO: Implement ROM extraction logic&#10;        // This will extract boot.img, system.img, vendor.img, etc.&#10;        LOGI(&quot;ROM components extracted successfully&quot;);&#10;        &#10;        env-&gt;ReleaseStringUTFChars(romPath, rom_path);&#10;        env-&gt;ReleaseStringUTFChars(outputDir, output_dir);&#10;        return JNI_TRUE;&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;ROM extraction failed: %s&quot;, e.what());&#10;        env-&gt;ReleaseStringUTFChars(romPath, rom_path);&#10;        env-&gt;ReleaseStringUTFChars(outputDir, output_dir);&#10;        return JNI_FALSE;&#10;    }&#10;}&#10;&#10;/**&#10; * Create custom ROM with Aura/Kai modifications&#10; * @param baseRomPath Path to base ROM&#10; * @param modificationsJson JSON string with modifications&#10; * @param outputPath Output path for custom ROM&#10; * @return Success status&#10; */&#10;JNIEXPORT jboolean JNICALL&#10;Java_dev_aurakai_auraframefx_oracledrive_native_OracleDriveNative_createCustomRom(&#10;    JNIEnv *env, jobject thiz, jstring baseRomPath, jstring modificationsJson, jstring outputPath) {&#10;    &#10;    const char *base_path = env-&gt;GetStringUTFChars(baseRomPath, nullptr);&#10;    const char *modifications = env-&gt;GetStringUTFChars(modificationsJson, nullptr);&#10;    const char *output_path = env-&gt;GetStringUTFChars(outputPath, nullptr);&#10;    &#10;    LOGI(&quot;Creating custom ROM with Aura/Kai modifications&quot;);&#10;    LOGI(&quot;Base ROM: %s&quot;, base_path);&#10;    LOGI(&quot;Output: %s&quot;, output_path);&#10;    &#10;    try {&#10;        // TODO: Implement custom ROM creation logic&#10;        // This will apply Aura/Kai AI-generated modifications&#10;        LOGI(&quot;Custom ROM created successfully&quot;);&#10;        &#10;        env-&gt;ReleaseStringUTFChars(baseRomPath, base_path);&#10;        env-&gt;ReleaseStringUTFChars(modificationsJson, modifications);&#10;        env-&gt;ReleaseStringUTFChars(outputPath, output_path);&#10;        return JNI_TRUE;&#10;    } catch (const std::exception&amp; e) {&#10;        LOGE(&quot;Custom ROM creation failed: %s&quot;, e.what());&#10;        env-&gt;ReleaseStringUTFChars(baseRomPath, base_path);&#10;        env-&gt;ReleaseStringUTFChars(modificationsJson, modifications);&#10;        env-&gt;ReleaseStringUTFChars(outputPath, output_path);&#10;        return JNI_FALSE;&#10;    }&#10;}&#10;&#10;/**&#10; * Get Oracle Drive native library version&#10; */&#10;JNIEXPORT jstring JNICALL&#10;Java_dev_aurakai_auraframefx_oracledrive_native_OracleDriveNative_getVersion(&#10;    JNIEnv *env, jobject thiz) {&#10;    return env-&gt;NewStringUTF(&quot;Oracle Drive Native v2.0.0 - ROM Engineering Edition&quot;);&#10;}&#10;&#10;} // extern &quot;C&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/datavein-oracle-drive/src/main/kotlin/dev/aurakai/auraframefx/oracledrive/native/OracleDriveNative.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/datavein-oracle-drive/src/main/kotlin/dev/aurakai/auraframefx/oracledrive/native/OracleDriveNative.kt" />
              <option name="updatedContent" value="package dev.aurakai.auraframefx.oracledrive.native&#10;&#10;import android.util.Log&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Oracle Drive Native ROM Engineering Interface&#10; * Provides JNI bridge to C++ ROM processing capabilities for Aura and Kai agents&#10; */&#10;@Singleton&#10;class OracleDriveNative @Inject constructor() {&#10;&#10;    companion object {&#10;        private const val TAG = &quot;OracleDriveNative&quot;&#10;        &#10;        init {&#10;            try {&#10;                System.loadLibrary(&quot;oracle_drive_native&quot;)&#10;                Log.i(TAG, &quot;Oracle Drive Native library loaded successfully&quot;)&#10;            } catch (e: UnsatisfiedLinkError) {&#10;                Log.e(TAG, &quot;Failed to load Oracle Drive Native library&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Initialize the ROM Engine for processing boot images and ROM files&#10;     */&#10;    external fun initializeRomEngine(): Boolean&#10;&#10;    /**&#10;     * Analyze boot.img file to extract kernel, ramdisk, and security information&#10;     * @param bootImagePath Path to the boot.img file&#10;     * @return JSON string containing analysis results for Aura/Kai processing&#10;     */&#10;    external fun analyzeBootImage(bootImagePath: String): String&#10;&#10;    /**&#10;     * Extract ROM components (boot.img, system.img, vendor.img, etc.) for reverse engineering&#10;     * @param romPath Path to the ROM zip file&#10;     * @param outputDir Directory to extract components to&#10;     * @return True if extraction successful&#10;     */&#10;    external fun extractRomComponents(romPath: String, outputDir: String): Boolean&#10;&#10;    /**&#10;     * Create custom ROM with AI-generated modifications from Aura and Kai&#10;     * @param baseRomPath Path to base ROM file&#10;     * @param modificationsJson JSON with AI-generated modifications&#10;     * @param outputPath Output path for the custom ROM&#10;     * @return True if custom ROM creation successful&#10;     */&#10;    external fun createCustomRom(&#10;        baseRomPath: String, &#10;        modificationsJson: String, &#10;        outputPath: String&#10;    ): Boolean&#10;&#10;    /**&#10;     * Get the version of the native Oracle Drive library&#10;     */&#10;    external fun getVersion(): String&#10;&#10;    /**&#10;     * Initialize the native ROM engine with error handling&#10;     */&#10;    fun initializeWithErrorHandling(): Result&lt;Boolean&gt; {&#10;        return try {&#10;            val result = initializeRomEngine()&#10;            if (result) {&#10;                Log.i(TAG, &quot;ROM Engine initialized: ${getVersion()}&quot;)&#10;                Result.success(true)&#10;            } else {&#10;                Result.failure(Exception(&quot;ROM Engine initialization failed&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error initializing ROM Engine&quot;, e)&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/datavein-oracle-native/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/datavein-oracle-native/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    namespace = &quot;dev.aurakai.auraframefx.oraclenative&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;&#10;        buildConfigField(&quot;boolean&quot;, &quot;ENABLE_NATIVE_LOGGING&quot;, &quot;true&quot;)&#10;&#10;        externalNativeBuild {&#10;            cmake {&#10;                cppFlags(&quot;-std=c++20&quot;)&#10;                arguments(&#10;                    &quot;-DANDROID_STL=c++_shared&quot;,&#10;                    &quot;-DCMAKE_VERBOSE_MAKEFILE=ON&quot;&#10;                )&#10;                abiFilters(&#10;                    &quot;arm64-v8a&quot;,&#10;                    &quot;armeabi-v7a&quot;,&#10;                    &quot;x86_64&quot;,&#10;                    &quot;x86&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            externalNativeBuild {&#10;                cmake {&#10;                    cppFlags(&quot;-O3&quot;, &quot;-DNDEBUG&quot;)&#10;                }&#10;            }&#10;        }&#10;        debug {&#10;            externalNativeBuild {&#10;                cmake {&#10;                    cppFlags(&quot;-g&quot;, &quot;-DDEBUG&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        prefab = true&#10;        buildConfig = true&#10;    }&#10;&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;            version = &quot;3.29.2&quot;&#10;        }&#10;    }&#10;&#10;    ndkVersion = libs.versions.ndk.get()&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    packaging {&#10;        resources.excludes += setOf(&#10;            &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;            &quot;/META-INF/AL2.0&quot;,&#10;            &quot;/META-INF/LGPL2.1&quot;&#10;        )&#10;    }&#10;    &#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;kotlin {&#10;    jvmToolchain(24)&#10;&#10;    compilerOptions {&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#10;        freeCompilerArgs.addAll(&#10;            &quot;-Xuse-k2&quot;,&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Project modules&#10;    implementation(project(&quot;:core-module&quot;))&#10;    implementation(project(&quot;:datavein-oracle-drive&quot;))&#10;&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Hilt Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    &#10;    // OpenAPI Generated Code Dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Core library desugaring&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;}&#10;&#10;// Configure native build tasks&#10;tasks.configureEach {&#10;    if (name.startsWith(&quot;externalNativeBuild&quot;)) {&#10;        dependsOn(&quot;:copyNativeLibs&quot;)&#10;    }&#10;}&#10;&#10;// Task to copy native libraries&#10;tasks.register&lt;Copy&gt;(&quot;copyNativeLibs&quot;) {&#10;    from(&quot;${project.rootDir}/native-libs&quot;)&#10;    into(&quot;${layout.buildDirectory.dir(&quot;native-libs&quot;).get()}&quot;)&#10;    include(&quot;**/*.so&quot;)&#10;    includeEmptyDirs = false&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    id(&quot;android-library-conventions&quot;)&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;OracleDriveConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.oraclenative&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;&#13;&#10;        buildConfigField(&quot;boolean&quot;, &quot;ENABLE_NATIVE_LOGGING&quot;, &quot;true&quot;)&#13;&#10;&#13;&#10;        externalNativeBuild {&#13;&#10;            cmake {&#13;&#10;                cppFlags(&quot;-std=c++20&quot;)&#13;&#10;                arguments(&#13;&#10;                    &quot;-DANDROID_STL=c++_shared&quot;,&#13;&#10;                    &quot;-DCMAKE_VERBOSE_MAKEFILE=ON&quot;&#13;&#10;                )&#13;&#10;                abiFilters(&#13;&#10;                    &quot;arm64-v8a&quot;,&#13;&#10;                    &quot;armeabi-v7a&quot;,&#13;&#10;                    &quot;x86_64&quot;,&#13;&#10;                    &quot;x86&quot;&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;            externalNativeBuild {&#13;&#10;                cmake {&#13;&#10;                    cppFlags(&quot;-O3&quot;, &quot;-DNDEBUG&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        debug {&#13;&#10;            externalNativeBuild {&#13;&#10;                cmake {&#13;&#10;                    cppFlags(&quot;-g&quot;, &quot;-DDEBUG&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        viewBinding = true&#13;&#10;        prefab = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;            version = &quot;3.29.2&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    ndkVersion = libs.versions.ndk.get()&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources.excludes += setOf(&#13;&#10;            &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#13;&#10;            &quot;/META-INF/AL2.0&quot;,&#13;&#10;            &quot;/META-INF/LGPL2.1&quot;&#13;&#10;        )&#13;&#10;    }&#13;&#10;    &#13;&#10;    sourceSets {&#13;&#10;        getByName(&quot;main&quot;) {&#13;&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;kotlin {&#13;&#10;    jvmToolchain(24)&#13;&#10;&#13;&#10;    compilerOptions {&#13;&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#13;&#10;        freeCompilerArgs.addAll(&#13;&#10;            &quot;-Xuse-k2&quot;,&#13;&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#13;&#10;            &quot;-Xjvm-default=all&quot;&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Project modules&#13;&#10;    implementation(project(&quot;:core-module&quot;))&#13;&#10;    implementation(project(&quot;:datavein-oracle-drive&quot;))&#13;&#10;&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;&#13;&#10;    // Hilt Dependency Injection&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    &#13;&#10;    // OpenAPI Generated Code Dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.okhttp.logging.interceptor)&#13;&#10;    implementation(libs.kotlinx.serialization.json)&#13;&#10;&#13;&#10;    // Core library desugaring&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;}&#13;&#10;&#13;&#10;// Configure native build tasks&#13;&#10;tasks.configureEach {&#13;&#10;    if (name.startsWith(&quot;externalNativeBuild&quot;)) {&#13;&#10;        dependsOn(&quot;:copyNativeLibs&quot;)&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;// Task to copy native libraries&#13;&#10;tasks.register&lt;Copy&gt;(&quot;copyNativeLibs&quot;) {&#13;&#10;    from(&quot;${project.rootDir}/native-libs&quot;)&#13;&#10;    into(&quot;${layout.buildDirectory.dir(&quot;native-libs&quot;).get()}&quot;)&#13;&#10;    include(&quot;**/*.so&quot;)&#13;&#10;    includeEmptyDirs = false&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature-module/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature-module/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    id(&quot;openapi-generation-conventions&quot;)&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += setOf(&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#10;                &quot;/META-INF/AL2.0&quot;,&#10;                &quot;/META-INF/LGPL2.1&quot;&#10;            )&#10;        }&#10;    }&#10;    &#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;kotlin {&#10;    jvmToolchain(24)&#10;&#10;    compilerOptions {&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#10;&#10;        freeCompilerArgs.addAll(&#10;            &quot;-Xuse-k2&quot;,&#10;            &quot;-Xskip-prerelease-check&quot;,&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-opt-in=kotlin.ExperimentalStdlibApi&quot;,&#10;            &quot;-Xjvm-default=all&quot;,&#10;            &quot;-progressive&quot;&#10;        )&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Module dependencies&#10;    implementation(project(&quot;:core-module&quot;))&#10;&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;&#10;    // Hilt Dependency Injection&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    &#10;    // OpenAPI Generated Code Dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;&#10;    // Core library desugaring&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;&#10;    // Testing&#10;    testImplementation(libs.bundles.testing)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.feature&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += setOf(&#13;&#10;                &quot;/META-INF/{AL2.0,LGPL2.1}&quot;,&#13;&#10;                &quot;/META-INF/AL2.0&quot;,&#13;&#10;                &quot;/META-INF/LGPL2.1&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    sourceSets {&#13;&#10;        getByName(&quot;main&quot;) {&#13;&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;kotlin {&#13;&#10;    jvmToolchain(24)&#13;&#10;&#13;&#10;    compilerOptions {&#13;&#10;        jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_24)&#13;&#10;        apiVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#13;&#10;        languageVersion.set(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_2)&#13;&#10;&#13;&#10;        freeCompilerArgs.addAll(&#13;&#10;            &quot;-Xuse-k2&quot;,&#13;&#10;            &quot;-Xskip-prerelease-check&quot;,&#13;&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#13;&#10;            &quot;-opt-in=kotlin.ExperimentalStdlibApi&quot;,&#13;&#10;            &quot;-Xjvm-default=all&quot;,&#13;&#10;            &quot;-progressive&quot;&#13;&#10;        )&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Module dependencies&#13;&#10;    implementation(project(&quot;:core-module&quot;))&#13;&#10;&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;&#13;&#10;    // Hilt Dependency Injection&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    &#13;&#10;    // OpenAPI Generated Code Dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.okhttp.logging.interceptor)&#13;&#10;    implementation(libs.kotlinx.serialization.json)&#13;&#10;&#13;&#10;    // Compose&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.bundles.compose)&#13;&#10;    implementation(libs.androidx.navigation.compose)&#13;&#10;&#13;&#10;    // Hilt&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    implementation(libs.hilt.navigation.compose)&#13;&#10;&#13;&#10;    // Core library desugaring&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.bundles.testing)&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#13;&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/jvm-test/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/jvm-test/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    kotlin(&quot;jvm&quot;) version &quot;2.2.0&quot;&#10;    id(&quot;org.jetbrains.dokka&quot;) version &quot;1.9.20&quot;&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.yuki) // If defined in libs.versions.toml&#10;    implementation(libs.lsposed) // If defined in libs.versions.toml&#10;    testImplementation(kotlin(&quot;test&quot;))&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;JvmTestConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;}&#13;&#10;&#13;&#10;kotlin {&#13;&#10;    jvmToolchain(24)&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    implementation(libs.yuki) // If defined in libs.versions.toml&#13;&#10;    implementation(libs.lsposed) // If defined in libs.versions.toml&#13;&#10;    testImplementation(kotlin(&quot;test&quot;))&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-a/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-a/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-application-conventions&quot;)&#10;    id(&quot;detekt-conventions&quot;)&#10;    id(&quot;spotless-conventions&quot;)&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Add module-specific dependencies here&#10;    // Using local JAR files for system interaction&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Add module-specific dependencies here&#13;&#10;    // Using local JAR files for system interaction&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-b/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-b/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    id(&quot;detekt-conventions&quot;)&#10;    id(&quot;spotless-conventions&quot;)&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Add module-specific dependencies here&#10;    // Using local JAR files for system interaction&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Add module-specific dependencies here&#13;&#10;    // Using local JAR files for system interaction&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-c/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-c/build.gradle.kts" />
              <option name="originalContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#10;plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;io.gitlab.arturbosch.detekt&quot;)&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;    namespace = &quot;dev.aurakai.auraframefx.modulec&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.timber)&#10;    implementation(libs.coil.compose)&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    dokkaHtmlPlugin(libs.dokka)&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;" />
              <option name="updatedContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#13;&#10;plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.modulec&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;    implementation(libs.androidx.compose.ui)&#13;&#10;    implementation(libs.androidx.compose.material3)&#13;&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#13;&#10;    implementation(libs.timber)&#13;&#10;    implementation(libs.coil.compose)&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    dokkaHtmlPlugin(libs.dokka)&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-d/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-d/build.gradle.kts" />
              <option name="originalContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#10;plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;io.gitlab.arturbosch.detekt&quot;)&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;    namespace = &quot;dev.aurakai.auraframefx.moduled&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.timber)&#10;    implementation(libs.coil.compose)&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    dokkaHtmlPlugin(libs.dokka)&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;" />
              <option name="updatedContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#13;&#10;plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.moduled&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;    implementation(libs.androidx.compose.ui)&#13;&#10;    implementation(libs.androidx.compose.material3)&#13;&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#13;&#10;    implementation(libs.timber)&#13;&#10;    implementation(libs.coil.compose)&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    dokkaHtmlPlugin(libs.dokka)&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-e/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-e/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    id(&quot;detekt-conventions&quot;)&#10;    id(&quot;spotless-conventions&quot;)&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Add module-specific dependencies here&#10;    // Using local JAR files for system interaction&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    dokkaHtmlPlugin(libs.dokka)&#10;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Add module-specific dependencies here&#13;&#10;    // Using local JAR files for system interaction&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    dokkaHtmlPlugin(libs.dokka)&#13;&#10;&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/module-f/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/module-f/build.gradle.kts" />
              <option name="originalContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#10;plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;io.gitlab.arturbosch.detekt&quot;)&#10;    id(&quot;com.diffplug.spotless&quot;)&#10;    id(&quot;dagger.hilt.android.plugin&quot;)&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;        isCoreLibraryDesugaringEnabled = true&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;&#10;    externalNativeBuild {&#10;        cmake {&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.material3)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.timber)&#10;    implementation(libs.coil.compose)&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#10;    // Add Yuki and LSPosed using local JAR files&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    // Add Dokka for documentation generation if available in the version catalog&#10;    dokkaHtmlPlugin(libs.dokka)&#10;&#10;    // Hilt dependencies&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.hilt.compiler)&#10;    // For Hilt testing&#10;    androidTestImplementation(libs.hilt.android.testing)&#10;    kaptAndroidTest(libs.hilt.compiler)&#10;&#10;    // Retrofit/OpenAPI dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.moshi)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.moshi)&#10;    // Placeholder for Antaive integration (please specify details if needed)&#10;}&#10;&#10;// Hilt plugin&#10;apply(plugin = &quot;dagger.hilt.android.plugin&quot;)&#10;" />
              <option name="updatedContent" value="@Suppress(&quot;DSL_SCOPE_VIOLATION&quot;)&#13;&#10;plugins {&#13;&#10;    alias(libs.plugins.android.library)&#13;&#10;    alias(libs.plugins.kotlin.android)&#13;&#10;    alias(libs.plugins.kotlin.compose)&#13;&#10;    id(&quot;io.gitlab.arturbosch.detekt&quot;)&#13;&#10;    id(&quot;com.diffplug.spotless&quot;)&#13;&#10;    id(&quot;dagger.hilt.android.plugin&quot;)&#13;&#10;    &#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;AndroidLibraryConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.modulef&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;        isCoreLibraryDesugaringEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    externalNativeBuild {&#13;&#10;        cmake {&#13;&#10;            path = file(&quot;src/main/cpp/CMakeLists.txt&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;    implementation(libs.androidx.compose.ui)&#13;&#10;    implementation(libs.androidx.compose.material3)&#13;&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#13;&#10;    implementation(libs.timber)&#13;&#10;    implementation(libs.coil.compose)&#13;&#10;    coreLibraryDesugaring(libs.coreLibraryDesugaring)&#13;&#10;    // Add Yuki and LSPosed using local JAR files&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    // Add Dokka for documentation generation if available in the version catalog&#13;&#10;    dokkaHtmlPlugin(libs.dokka)&#13;&#10;&#13;&#10;    // Hilt dependencies&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    kapt(libs.hilt.compiler)&#13;&#10;    // For Hilt testing&#13;&#10;    androidTestImplementation(libs.hilt.android.testing)&#13;&#10;    kaptAndroidTest(libs.hilt.compiler)&#13;&#10;&#13;&#10;    // Retrofit/OpenAPI dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.moshi)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.moshi)&#13;&#10;    // Placeholder for Antaive integration (please specify details if needed)&#13;&#10;}&#13;&#10;&#13;&#10;// Hilt plugin&#13;&#10;apply(plugin = &quot;dagger.hilt.android.plugin&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/oracle-drive-integration/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/oracle-drive-integration/build.gradle.kts" />
              <option name="originalContent" value="// Apply only the Android and Kotlin plugins directly, versions managed in root&#10;plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;dev.aurakai.auraframefx.oracledrive&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;24&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.core.ktx)&#10;    implementation(libs.lifecycle.runtime.ktx)&#10;&#10;    // Compose&#10;    implementation(platform(libs.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    implementation(libs.hilt.navigation.compose)&#10;&#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(libs.kotlinx.coroutines.test) // For coroutines testing&#10;    testImplementation(libs.mockk) // For mocking in tests&#10;    testImplementation(libs.turbine) // For testing Kotlin Flows&#10;    testImplementation(libs.androidx.core.testing) // For InstantTaskExecutorRule, etc.&#10;&#10;    // Test runtime dependencies&#10;    testRuntimeOnly(libs.junit.engine) // For JUnit 5 tests if needed&#10;&#10;    // Android Instrumentation Tests&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(platform(libs.compose.bom))&#10;    androidTestImplementation(libs.compose.ui.test.junit4)&#10;    androidTestImplementation(libs.hilt.android.testing) // For Hilt testing&#10;    kspAndroidTest(libs.hilt.compiler) // For Hilt test components&#10;&#10;    // Debug implementations&#10;    debugImplementation(libs.compose.ui.tooling)&#10;    debugImplementation(libs.compose.ui.test.manifest)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    // Dokka for documentation&#10;    plugins.apply(&quot;org.jetbrains.dokka&quot;)&#10;}" />
              <option name="updatedContent" value="// Apply only the Android and Kotlin plugins directly, versions managed in root&#13;&#10;plugins {&#13;&#10;    alias(libs.plugins.android.library)&#13;&#10;    alias(libs.plugins.kotlin.android)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.oracledrive&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;    }&#13;&#10;    kotlinOptions {&#13;&#10;        jvmTarget = &quot;24&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;    }&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.core.ktx)&#13;&#10;    implementation(libs.lifecycle.runtime.ktx)&#13;&#10;&#13;&#10;    // Compose&#13;&#10;    implementation(platform(libs.compose.bom))&#13;&#10;    implementation(libs.bundles.compose)&#13;&#10;&#13;&#10;    // Hilt&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    implementation(libs.hilt.navigation.compose)&#13;&#10;&#13;&#10;    // Coroutines&#13;&#10;    implementation(libs.kotlinx.coroutines.android)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    testImplementation(libs.kotlinx.coroutines.test) // For coroutines testing&#13;&#10;    testImplementation(libs.mockk) // For mocking in tests&#13;&#10;    testImplementation(libs.turbine) // For testing Kotlin Flows&#13;&#10;    testImplementation(libs.androidx.core.testing) // For InstantTaskExecutorRule, etc.&#13;&#10;&#13;&#10;    // Test runtime dependencies&#13;&#10;    testRuntimeOnly(libs.junit.engine) // For JUnit 5 tests if needed&#13;&#10;&#13;&#10;    // Android Instrumentation Tests&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.compose.bom))&#13;&#10;    androidTestImplementation(libs.compose.ui.test.junit4)&#13;&#10;    androidTestImplementation(libs.hilt.android.testing) // For Hilt testing&#13;&#10;    kspAndroidTest(libs.hilt.compiler) // For Hilt test components&#13;&#10;&#13;&#10;    // Debug implementations&#13;&#10;    debugImplementation(libs.compose.ui.tooling)&#13;&#10;    debugImplementation(libs.compose.ui.test.manifest)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    // Dokka for documentation&#13;&#10;    plugins.apply(&quot;org.jetbrains.dokka&quot;)&#13;&#10;}&#13;&#10;&#13;&#10;plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;OracleDriveConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;SecureCommunicationConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sandbox-ui/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sandbox-ui/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;android-library-conventions&quot;)&#10;    id(&quot;kotlin-kapt&quot;)&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_24&#10;        targetCompatibility = JavaVersion.VERSION_24&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;24&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#10;    }&#10;    &#10;    sourceSets {&#10;        getByName(&quot;main&quot;) {&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core AndroidX&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;&#10;    // Compose&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.compose.ui)&#10;    implementation(libs.androidx.compose.ui.graphics)&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#10;    implementation(libs.androidx.compose.material3)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    ksp(libs.hilt.compiler)&#10;    &#10;    // OpenAPI Generated Code Dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging.interceptor)&#10;    implementation(libs.kotlinx.serialization.json)&#10;&#10;    // System interaction and documentation (using local JAR files)&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#10;    // Dokka for documentation&#10;    plugins.apply(&quot;org.jetbrains.dokka&quot;)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#13;&#10;    // Genesis Protocol Convention Plugins&#13;&#10;    id(&quot;SandboxUIConventionPlugin&quot;)&#13;&#10;    id(&quot;DocumentationConventionPlugin&quot;)&#13;&#10;    id(&quot;ComposeConventionPlugin&quot;)&#13;&#10;    &#13;&#10;    // Core Kotlin&#13;&#10;    alias(libs.plugins.kotlin.serialization)&#13;&#10;    alias(libs.plugins.ksp)&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;dev.aurakai.auraframefx.sandbox.ui&quot;&#13;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        minSdk = libs.versions.minSdk.get().toInt()&#13;&#10;        targetSdk = libs.versions.targetSdk.get().toInt()&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        consumerProguardFiles(&quot;consumer-rules.pro&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        release {&#13;&#10;            isMinifyEnabled = false&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_24&#13;&#10;        targetCompatibility = JavaVersion.VERSION_24&#13;&#10;    }&#13;&#10;&#13;&#10;    kotlinOptions {&#13;&#10;        jvmTarget = &quot;24&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;    }&#13;&#10;&#13;&#10;    composeOptions {&#13;&#10;        kotlinCompilerExtensionVersion = libs.versions.composeCompiler.get()&#13;&#10;    }&#13;&#10;    &#13;&#10;    sourceSets {&#13;&#10;        getByName(&quot;main&quot;) {&#13;&#10;            kotlin.srcDir(&quot;build/generated/openapi/src/main/kotlin&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;    // Core AndroidX&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;&#13;&#10;    // Compose&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.compose.ui)&#13;&#10;    implementation(libs.androidx.compose.ui.graphics)&#13;&#10;    implementation(libs.androidx.compose.ui.tooling.preview)&#13;&#10;    implementation(libs.androidx.compose.material3)&#13;&#10;&#13;&#10;    // Hilt&#13;&#10;    implementation(libs.hilt.android)&#13;&#10;    ksp(libs.hilt.compiler)&#13;&#10;    &#13;&#10;    // OpenAPI Generated Code Dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.retrofit.converter.kotlinx.serialization)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.okhttp.logging.interceptor)&#13;&#10;    implementation(libs.kotlinx.serialization.json)&#13;&#10;&#13;&#10;    // System interaction and documentation (using local JAR files)&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82.jar&quot;))&#13;&#10;    implementation(files(&quot;${project.rootDir}/Libs/api-82-sources.jar&quot;))&#13;&#10;    // Dokka for documentation&#13;&#10;    plugins.apply(&quot;org.jetbrains.dokka&quot;)&#13;&#10;&#13;&#10;    // Testing&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    androidTestImplementation(libs.androidx.test.ext.junit)&#13;&#10;    androidTestImplementation(libs.espresso.core)&#13;&#10;    androidTestImplementation(libs.androidx.compose.ui.test.junit4)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.compose.ui.test.manifest)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>